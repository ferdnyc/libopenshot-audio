name: 'ci-build-and-release'
on:
  push:
    branches:
      - ci-artifacts
  pull_request:
    branches:
      - develop
      - ci-artifacts

jobs:

  build:
    runs-on: ${{ matrix.sys.os }}
    strategy:
      matrix:
        sys:
          - { os: ubuntu-18.04,   shell: bash        }
          - { os: ubuntu-20.04,   shell: bash        }
          - { os: macos-latest,   shell: bash        }
          - { os: windows-latest, shell: 'msys2 {0}' }
        compiler:
          - { cc: gcc,   cxx: g++     }
          - { cc: clang, cxx: clang++ }
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}
    env:
      CC:  ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - name: Check out source branch
        uses: actions/checkout@v2

      - name: Windows dependencies
        if: ${{ runner.os == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          release: false
          update: false
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-python3
            doxygen

      - name: macOS dependencies
        if: ${{ runner.os == 'macos' }}
        run: brew install doxygen

      - name: Linux dependencies
        if: ${{ runner.os == 'linux' }}
        run: >-
          sudo apt update;
          sudo apt install cmake clang libasound2-dev doxygen graphviz

      - name: Select CMake generator
        uses: haya14busa/action-cond@v1
        id: generator
        with:
          cond: ${{ runner.os == 'Windows' }}
          if_true: 'MSYS Makefiles'
          if_false: 'Unix Makefiles'

      - name: Build
        run: |
          if [ "_${{ runner.os }}_${{ matrix.compiler.cc }}" == "_macOS_clang" ]; then
            export CMAKE_EXTRA="${CMAKE_EXTRA} -DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ -DCMAKE_SHARED_LINKER_FLAGS=-stdlib=libc++ -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9";
          fi
          cmake -B build -S . -G "${{ steps.generator.outputs.value }}" ${CMAKE_EXTRA} -DCMAKE_INSTALL_PREFIX:PATH="$(pwd)/dist" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE:BOOL=1 -DAUDIO_DOCS_AUTO_INSTALL=0
          cmake --build build

      - name: Generate documentation, on Linux
        if: ${{ runner.os == 'linux' }}
        run: cmake --build build --target OpenShotAudio-doc

      - name: Install and export job artifact
        run: |
          cmake --install build
          zip -rm OpenShotAudio.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'OpenShotAudio-${{ matrix.sys.os }}-${{ matrix.compiler.cc }}'
          path: '${{ github.workspace }}/OpenShotAudio.zip'

  release:
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
        # action-recreate-release needs access to .git/refs/tags
      - name: Check out branch
        uses: actions/checkout@v2
      - name: Recreate latest CI release
        id: create_release
        uses: GongT/actions-recreate-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ci_latest
          release_name: Continuous Integration - latest builds
          body: Snapshot of ${{ github.ref }}.
          draft: false
          prerelease: true

  upload:
    runs-on: ubuntu-latest
    needs: [build, release]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
    steps:
      - name: Download our artifact
        uses: actions/download-artifact@v2
        with:
          name: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}'
          path: ${{ github.workspace }}

      - name: Add files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: 'OpenShotAudio.zip'
          asset_name: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}.zip'
          asset_content_type: application/zip

