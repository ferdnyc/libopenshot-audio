name: 'ci-build-and-release'
on:
  push:
    branches:
      - ci-artifacts
  pull_request:
    branches:
      - develop
      - ci-artifacts

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows clang isn't behaving so far
          - os: windows-latest
            compiler: clang
    env:
      CC: ${{ matrix.compiler }}
    steps:
      - name: Check out branch
        uses: actions/checkout@v2

      - name: Linux dependencies
        if: ${{ runner.os == 'linux' }}
        run: >-
          sudo apt update;
          sudo apt install cmake clang libasound2-dev doxygen graphviz

      - name: macOS dependencies
        if: ${{ runner.os == 'macos' }}
        run: |
          brew install doxygen

      - name: Windows dependencies
        if: ${{ runner.os == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          release: false
          update: false
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-python3
            doxygen

      - name: Build (Unix)
        if: ${{ runner.os != 'windows' }}
        run: |
          if [ "X${{ runner.os }}X${{ matrix.compiler }}X" == "XmacOSXclangX" ]; then
            export CMAKE_EXTRA="-DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ -DCMAKE_SHARED_LINKER_FLAGS=-stdlib=libc++ -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9";
          fi
          if [ "x${{ matrix.compiler }}" == "xgcc" ]; then
            export CC=gcc CXX=g++;
            else export CC=clang CXX=clang++;
          fi
          cmake -B build -S . -DCMAKE_INSTALL_PREFIX:PATH="${{ github.workspace }}/dist" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE:BOOL=1 -DAUDIO_DOCS_AUTO_INSTALL=0 ${CMAKE_EXTRA}
          cmake --build build
          cmake --build build --target OpenShotAudio-doc
          cmake --install build
          zip -rm OpenShotAudio.zip dist

      - name: Build (Windows)
        if: ${{ runner.os == 'windows' }}
        shell: msys2 {0}
        run: |
          if [ "x${{ matrix.compiler }}" == "xgcc" ]; then
            export CC=gcc CXX=g++;
            else export CC=clang CXX=clang++;
          fi
          cmake -B build -S . -G "MinGW Makefiles" "-DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/dist" "-DCMAKE_BUILD_TYPE=Debug" "-DCMAKE_VERBOSE_MAKEFILE:BOOL=1" "-DAUDIO_DOCS_AUTO_INSTALL=0"
          cmake --build build
          cmake --install build
          zip -rm OpenShotAudio.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}'
          path: '${{ github.workspace }}/OpenShotAudio.zip'

  release:
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
        # action-recreate-release needs access to .git/refs/tags
      - name: Check out branch
        uses: actions/checkout@v2
      - name: Recreate latest CI release
        id: create_release
        uses: GongT/actions-recreate-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ci_latest
          release_name: Continuous Integration - latest builds
          body: Snapshot of ${{ github.ref }}.
          draft: false
          prerelease: true

  upload:
    runs-on: ubuntu-latest
    needs: [build, release]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows clang isn't behaving so far
          - os: windows-latest
            compiler: clang
    steps:
      - name: Download our artifact
        uses: actions/download-artifact@v2
        with:
          name: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}'
          path: ${{ github.workspace }}

      - name: Add files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: 'OpenShotAudio.zip'
          asset_name: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}.zip'
          asset_content_type: application/zip
